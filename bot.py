import os
import random
import logging
import aiohttp
from datetime import datetime, timedelta
import pytz
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application, 
    CommandHandler, 
    ContextTypes,
    MessageHandler,
    filters
)
from telegram.error import TimedOut, NetworkError, RetryAfter
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import time
import httpx
import signal
import sys
import json
from typing import Dict, List, Union

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')
DNEVNIK_LOGIN = os.getenv('DNEVNIK_LOGIN')
DNEVNIK_PASSWORD = os.getenv('DNEVNIK_PASSWORD')
ADMIN_IDS = [1048782601]  

schedule_dict = {
    'Monday': [
        ('8:30', '–†–∞–∑–≥–æ–≤–æ—Ä—ã –æ –≤–∞–∂–Ω–æ–º'),
        ('9:25', '–ì–µ–æ–º–µ—Ç—Ä–∏—è'),
        ('10:30', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è'),
        ('11:25', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫'),
        ('12:20', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç'),
        ('13:15', '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        ('14:20', '–§–∏–∑–∏–∫–∞')
    ],
    'Tuesday': [
        ('8:30', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫'),
        ('9:25', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'),
        ('10:30', '–ò—Å—Ç–æ—Ä–∏—è'),
        ('11:25', '–ê–ª–≥–µ–±—Ä–∞'),
        ('12:20', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'),
        ('13:15', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫'),
        ('14:20', '–ë–∏–æ–ª–æ–≥–∏—è')
    ],
    'Wednesday': [
        ('8:30', '–ê–ª–≥–µ–±—Ä–∞'),
        ('9:25', '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞'),
        ('10:30', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫'),
        ('11:25', '–ì–µ–æ–º–µ—Ç—Ä–∏—è'),
        ('12:20', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫'),
        ('13:15', '–ê–ª–≥–µ–±—Ä–∞'),
        ('14:20', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞')
    ],
    'Thursday': [
        ('8:30', '–ò—Å—Ç–æ—Ä–∏—è'),
        ('9:25', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'),
        ('10:30', '–ê–ª–≥–µ–±—Ä–∞'),
        ('11:25', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'),
        ('12:20', '–ì–µ–æ–º–µ—Ç—Ä–∏—è'),
        ('13:15', '–§–∏–∑–∏–∫–∞'),
        ('14:20', '–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞')
    ],
    'Friday': [
        ('8:30', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'),
        ('9:25', '–ü—Ä–∞–∫—Ç–∏–∫—É–º –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'),
        ('10:30', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'),
        ('11:25', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'),
        ('12:20', '–•–∏–º–∏—è'),
        ('13:15', '–û–ë–ó–†'),
        ('14:20', '–û–ü–î')
    ]
}

motivational_quotes = [
    "–í–µ—Ä—å –≤ —Å–µ–±—è, –∏ —Ç—ã —É–∂–µ –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É!",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.",
    "–î–µ–π—Å—Ç–≤—É–π —Å–µ–π—á–∞—Å. –ù–µ –∂–¥–∏ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞.",
    "–¢–≤–æ–∏ –º–µ—á—Ç—ã –Ω–µ –∏–º–µ—é—Ç —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏.",
    "–ü—É—Ç—å –≤ —Ç—ã—Å—è—á—É –º–∏–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.",
    "–£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.",
    "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –Ω–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∂–∏–∑–Ω–∏; –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –∏ –µ—Å—Ç—å –∂–∏–∑–Ω—å.",
    "–ó–Ω–∞–Ω–∏–µ - —Å–∏–ª–∞, —É—á–µ–Ω–∏–µ - —Å–≤–µ—Ç!",
    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ —Å—Ç–∞—Ç—å —Ç–µ–º, –∫–µ–º —Ç—ã –º–æ–≥ –±—ã –±—ã—Ç—å.",
    "–°–ª–æ–∂–Ω–µ–µ –≤—Å–µ–≥–æ –Ω–∞—á–∞—Ç—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —É–ø–æ—Ä—Å—Ç–≤–∞.",
    "–ß—Ç–æ–±—ã –¥–æ–π—Ç–∏ –¥–æ —Ü–µ–ª–∏, –Ω–∞–¥–æ –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –∏–¥—Ç–∏.",
    "–£—á–∏—Ç–µ—Å—å —Ç–∞–∫, —Å–ª–æ–≤–Ω–æ –≤—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—â—É—â–∞–µ—Ç–µ –Ω–µ—Ö–≤–∞—Ç–∫—É —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π.",
    "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–±—ã–≤–∞–µ—Ç—Å—è –≤—Å—ë –≤—ã—É—á–µ–Ω–Ω–æ–µ –≤ —à–∫–æ–ª–µ.",
    "–£—Å–µ—Ä–¥–∏–µ - –º–∞—Ç—å —É—Å–ø–µ—Ö–∞.",
    "–ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ - —ç—Ç–æ –µ—â–µ –æ–¥–∏–Ω —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É.",
    "–ß–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞–µ—à—å, —Ç–µ–º –±–æ–ª—å—à–µ –º–æ–∂–µ—à—å.",
    "–í–∞—à–µ –±—É–¥—É—â–µ–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–µ–º, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è.",
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∑–Ω–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω–æ—Å—è—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π –¥–æ—Ö–æ–¥.",
    "–ß—Ç–µ–Ω–∏–µ - –≤–æ—Ç –ª—É—á—à–µ–µ —É—á–µ–Ω–∏–µ!",
    "–£—á–∏—Ç—å—Å—è –∏ –Ω–µ —Ä–∞–∑–º—ã—à–ª—è—Ç—å - –Ω–∞–ø—Ä–∞—Å–Ω–æ —Ç–µ—Ä—è—Ç—å –≤—Ä–µ–º—è.",
    "–ß–µ–º —É–º–Ω–µ–µ —á–µ–ª–æ–≤–µ–∫, —Ç–µ–º –ª–µ–≥—á–µ –æ–Ω –ø—Ä–∏–∑–Ω–∞–µ—Ç —Å–µ–±—è –¥—É—Ä–∞–∫–æ–º.",
    "–ó–Ω–∞–Ω–∏–µ –µ—Å—Ç—å —Å–∏–ª–∞, —Å–∏–ª–∞ –µ—Å—Ç—å –∑–Ω–∞–Ω–∏–µ.",
    "–ß—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏, –Ω—É–∂–Ω–æ –ø—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –∫ –Ω–µ–π –∏–¥—Ç–∏.",
    "–í–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª–æ–≥–æ.",
    "–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π."
]

answers_dict: Dict[str, List[Union[str, str]]] = {}
ANSWERS_FILE = "answers.json"
global adding_answers_states
adding_answers_states = {}

CHATS_FILE = "chats.json"
CHATS_SET = set()  

def load_chats():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        global CHATS_SET
        if os.path.exists(CHATS_FILE):
            with open(CHATS_FILE, 'r', encoding='utf-8') as f:
                chats = json.load(f)
                CHATS_SET = set(chats)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —á–∞—Ç—ã: {CHATS_SET}")
        return CHATS_SET
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
        return CHATS_SET

def save_chats(chats):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        global CHATS_SET
        CHATS_SET = chats
        with open(CHATS_FILE, 'w', encoding='utf-8') as f:
            json.dump(list(chats), f)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —á–∞—Ç—ã: {CHATS_SET}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")

def add_chat(chat_id: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫"""
    global CHATS_SET
    CHATS_SET.add(chat_id)
    save_chats(CHATS_SET)
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç {chat_id}. –¢–µ–∫—É—â–∏–µ —á–∞—Ç—ã: {CHATS_SET}")

def load_answers():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    global answers_dict
    try:
        if os.path.exists(ANSWERS_FILE):
            with open(ANSWERS_FILE, 'r', encoding='utf-8') as f:
                answers_dict = json.load(f)
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {answers_dict}")
        else:
            logger.info("–§–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            answers_dict = {}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–≤–µ—Ç–æ–≤: {e}")

def save_answers():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤: {answers_dict}")
        with open(ANSWERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(answers_dict, f, ensure_ascii=False, indent=2)
        logger.info("‚úÖ –û—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")

async def add_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
    user_id = update.effective_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ add_answer –ø–æ–ª—É—á–µ–Ω–∞. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
    
    if user_id not in ADMIN_IDS:
        logger.warning(f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        args = context.args
        if not args:
            await update.message.reply_text("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/add_answer –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
            return
        
        subject = ' '.join(args)
        logger.info(f"–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject}")
        
        global adding_answers_states
        adding_answers_states[user_id] = {
            'subject': subject,
            'answers': []
        }
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {adding_answers_states[user_id]}")
        
        await update.message.reply_text(
            f"üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}'\n"
            "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤")

async def handle_done(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    add_chat(chat_id)  
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /done –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    global adding_answers_states
    logger.info(f"–¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ /done: {adding_answers_states}")
    
    if user_id not in adding_answers_states:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤")
        return
    
    try:
        state = adding_answers_states[user_id]
        subject = state['subject']
        answers = state['answers']
        
        if not answers:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤")
            del adding_answers_states[user_id]
            return
        
        
        global answers_dict
        answers_dict[subject] = answers
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject}: {answers}")
        save_answers()
        
        
        notification = f"üìö –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject}"
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Ç—ã: {CHATS_SET}")
        for chat_id in CHATS_SET:
            try:
                await context.bot.send_message(chat_id=chat_id, text=notification)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
        
        
        del adding_answers_states[user_id]
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject}")
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤")

async def handle_answer_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    add_chat(chat_id)  
    
    if update.message.text and update.message.text.startswith('/'):
        return
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –¢–µ–∫—Å—Ç: {update.message.text if update.message.text else '—Ñ–æ—Ç–æ'}")
    logger.info(f"–¢–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤: {adding_answers_states}")
    
   
    if user_id not in ADMIN_IDS:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return
    
    
    if user_id not in adding_answers_states:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤")
        return
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {adding_answers_states[user_id]['subject']}")
    
    try:
        
        if update.message.text and not update.message.text.startswith('/'):
            adding_answers_states[user_id]['answers'].append({"type": "text", "content": update.message.text})
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {update.message.text[:50]}...")
        elif update.message.photo:
            photo_id = update.message.photo[-1].file_id
            adding_answers_states[user_id]['answers'].append({"type": "photo", "content": photo_id})
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ —Å ID: {photo_id}")
        
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞")

async def get_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    try:
        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤")
        args = context.args
        if not args:
            await update.message.reply_text("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/get_answer –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
            return
        
        subject = ' '.join(args)
        logger.info(f"–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject}")
        
        
        logger.info(f"–¢–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –≤ –±–∞–∑–µ: {answers_dict}")
        
        if subject not in answers_dict:
            logger.warning(f"–û—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject}")
            await update.message.reply_text(f"‚ùå –û—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        await update.message.reply_text(f"üìö –û—Ç–≤–µ—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {subject}")
        
       
        for answer in answers_dict[subject]:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Ç–∏–ø–∞: {answer['type']}")
            if answer["type"] == "text":
                await update.message.reply_text(answer["content"])
            elif answer["type"] == "photo":
                await update.message.reply_photo(answer["content"])
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤")

async def list_answers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏"""
    try:
        if not answers_dict:
            await update.message.reply_text("üìö –°–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø—É—Å—Ç")
            return
        
        message = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏:\n\n"
        for subject in answers_dict.keys():
            message += f"‚Ä¢ {subject}\n"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤")

async def del_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        args = context.args
        if not args:
            await update.message.reply_text("‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/del_answer –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
            return
        
        subject = ' '.join(args)
        
        if subject in answers_dict:
            del answers_dict[subject]
            save_answers()
            await update.message.reply_text(f"‚úÖ –û—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}' —É–¥–∞–ª–µ–Ω—ã")
            
            notification = f"üóë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject}"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Ç—ã: {CHATS_SET}")
            for chat_id in CHATS_SET:
                try:
                    await context.bot.send_message(chat_id=chat_id, text=notification)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
        else:
            await update.message.reply_text(f"‚ùå –û—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '{subject}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤")

async def get_weather(city: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    try:
        url = f"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/{city}/today?unitGroup=metric&include=current&key={WEATHER_API_KEY}&contentType=json"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.json()
                current = data['currentConditions']
                return f"{city}: {current['temp']}¬∞C, {current['conditions']}"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}: {e}")
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}"

def get_random_image() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ images"""
    try:
        images_dir = Path('images')
        images = list(images_dir.glob('*.jpg')) + list(images_dir.glob('*.png'))
        if images:
            return str(random.choice(images))
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

async def send_morning_message(context: ContextTypes.DEFAULT_TYPE = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if not hasattr(context, '_chat_id'):
            logger.error("Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        moscow_weather = await get_weather("Moscow")
        podolsk_weather = await get_weather("Podolsk")
        
        message = f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–º! ‚ú®\n\n"
        message += f"üå§ –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è:\nüèô {moscow_weather}\nüåÜ {podolsk_weather}\n\n"
        message += f"üí´ –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n‚ú® {random.choice(motivational_quotes)} ‚ú®\n\n"
        
        weekday = datetime.now().strftime('%A')
        if weekday in schedule_dict:
            message += "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
            for time, lesson in schedule_dict[weekday]:
                message += f"‚è∞ {time} - üìñ {lesson}\n"
            message += "\nüéØ –£–¥–∞—á–Ω–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –¥–Ω—è! üåü"
        else:
            message += "üéâ –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π! –û—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞! ‚ú®"
        
        image_path = get_random_image()
        if image_path:
            await context.bot.send_photo(
                chat_id=context._chat_id,
                photo=open(image_path, 'rb'),
                caption=message
            )
        else:
            await context.bot.send_message(
                chat_id=context._chat_id,
                text=message
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_lesson_notification(context: ContextTypes.DEFAULT_TYPE = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É—Ä–æ–∫–æ–º"""
    try:
        if not hasattr(context, '_chat_id'):
            logger.error("Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        weekday = datetime.now().strftime('%A')
        current_time = datetime.now().strftime('%H:%M')
        
        if weekday in schedule_dict:
            for time, lesson in schedule_dict[weekday]:
                lesson_time = datetime.strptime(time, '%H:%M').time()
                notification_time = (lesson_time - timedelta(minutes=5)).strftime('%H:%M')
                
                if current_time == notification_time:
                    message = f"‚è∞ –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —É—Ä–æ–∫!\n\nüìö {lesson}\n‚è± –ù–∞—á–∞–ª–æ –≤ {time}"
                    await context.bot.send_message(
                        chat_id=context._chat_id,
                        text=message
                    )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Ä–æ–∫–µ: {e}")

class ChatIdStore:
    def __init__(self):
        self.chat_ids = set()
        self.filename = 'chat_ids.txt'
        self.load_chat_ids()

    def add_chat_id(self, chat_id):
        self.chat_ids.add(chat_id)
        self.save_chat_ids()

    def get_chat_ids(self):
        return self.chat_ids

    def load_chat_ids(self):
        try:
            if os.path.exists(self.filename):
                with open(self.filename, 'r') as f:
                    self.chat_ids = set(int(line.strip()) for line in f if line.strip())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ chat_ids: {e}")

    def save_chat_ids(self):
        try:
            with open(self.filename, 'w') as f:
                for chat_id in self.chat_ids:
                    f.write(f"{chat_id}\n")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chat_ids: {e}")

chat_id_store = ChatIdStore()

async def show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å"""
    weekday = datetime.now().strftime('%A')
    message = "üéØ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤:\n\n"
    
    if len(context.args) > 0:
        day = context.args[0].capitalize()
        if day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']:
            weekday = day
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:\n\n"
                "‚ú® Monday - –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n"
                "‚ú® Tuesday - –í—Ç–æ—Ä–Ω–∏–∫\n"
                "‚ú® Wednesday - –°—Ä–µ–¥–∞\n"
                "‚ú® Thursday - –ß–µ—Ç–≤–µ—Ä–≥\n"
                "‚ú® Friday - –ü—è—Ç–Ω–∏—Ü–∞"
            )
            return
    
    if weekday in schedule_dict:
        message += f"üìÖ –î–µ–Ω—å: {weekday}\n\n"
        for time, lesson in schedule_dict[weekday]:
            message += f"‚è∞ {time} - üìö {lesson}\n"
    else:
        message += "üåü –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å! –û—Ç–¥—ã—Ö–∞–µ–º! üéâ"
    
    await update.message.reply_text(message)

async def week_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"""
    message = "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
    
    for day, lessons in schedule_dict.items():
        message += f"‚ú® {day}\n"
        for time, subject in lessons:
            message += f"‚è∞ {time} - üìö {subject}\n"
        message += "\n"
    
    if len(message) > 4096:
        parts = [message[i:i+4096] for i in range(0, len(message), 4096)]
        for part in parts:
            await update.message.reply_text(part)
    else:
        await update.message.reply_text(message)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        chat_id = update.effective_chat.id
        add_chat(chat_id)
  
        message = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.\n\n"
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /week - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é\n"
            "‚Ä¢ /current - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ\n"
            "‚Ä¢ /break - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–º–µ–Ω–µ\n"
            "‚Ä¢ /next - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ\n"
            "‚Ä¢ /find –ø—Ä–µ–¥–º–µ—Ç - –Ω–∞–π—Ç–∏ —É—Ä–æ–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É\n"
            "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n"
            "‚Ä¢ /homework - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
            "‚Ä¢ /homework_add - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
            "‚Ä¢ /homework_del - —É–¥–∞–ª–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n"
            "üìù –†–∞–±–æ—Ç–∞ —Å –æ—Ç–≤–µ—Ç–∞–º–∏:\n"
            "‚Ä¢ /get_answer –ø—Ä–µ–¥–º–µ—Ç - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É\n"
            "‚Ä¢ /list_answer - —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –æ—Ç–≤–µ—Ç–∞–º–∏\n"
            "üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "‚Ä¢ /add_answer –ø—Ä–µ–¥–º–µ—Ç - –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞\n"
            "‚Ä¢ /del_answer –ø—Ä–µ–¥–º–µ—Ç - —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞\n"
        )
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

async def test_morning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    context._chat_id = update.effective_chat.id
    await send_morning_message(context)
    
async def test_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ä–æ–∫–µ"""
    context._chat_id = update.effective_chat.id
    current_time = datetime.now()
    next_lesson = None
    weekday = current_time.strftime('%A')
    
    if weekday in schedule_dict:
        for time, lesson in schedule_dict[weekday]:
            lesson_time = datetime.strptime(time, '%H:%M').time()
            if lesson_time > current_time.time():
                next_lesson = (time, lesson)
                break
        
        if next_lesson:
            message = (
                f"‚è∞ –í–Ω–∏–º–∞–Ω–∏–µ! –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —É—Ä–æ–∫!\n\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {next_lesson[1]}\n"
                f"‚è± –ù–∞—á–∞–ª–æ –≤ {next_lesson[0]}\n\n"
                f"‚ú® –ñ–µ–ª–∞—é —É—Å–ø–µ—à–Ω–æ–≥–æ —É—Ä–æ–∫–∞! üåü"
            )
            await context.bot.send_message(
                chat_id=context._chat_id,
                text=message
            )
        else:
            await context.bot.send_message(
                chat_id=context._chat_id,
                text="üåü –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç!\n\nüéâ –ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å! ‚ú®"
            )
    else:
        await context.bot.send_message(
            chat_id=context._chat_id,
            text="üéä –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å!\n\n‚ú® –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –æ—Ç–¥—ã—Ö–æ–º! üåü"
        )

async def next_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ"""
    moscow_tz = pytz.timezone('Europe/Moscow')
    current_time = datetime.now(moscow_tz)
    weekday = current_time.strftime('%A')
    
    if weekday in schedule_dict:
        next_lesson_info = None
        for time, lesson in schedule_dict[weekday]:
            lesson_time = datetime.strptime(time, '%H:%M').time()
            if lesson_time > current_time.time():
                next_lesson_info = (time, lesson)
                break
        
        if next_lesson_info:
            lesson_time = datetime.strptime(next_lesson_info[0], '%H:%M')
            time_until = lesson_time - current_time.replace(microsecond=0)
            hours, remainder = divmod(time_until.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            
            message = (
                f"üéØ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:\n\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {next_lesson_info[1]}\n"
                f"‚è∞ –ù–∞—á–∞–ª–æ –≤ {next_lesson_info[0]}\n"
                f"‚è≥ –î–æ –Ω–∞—á–∞–ª–∞: {hours} —á. {minutes} –º–∏–Ω.\n"
                f"üí´ –£–¥–∞—á–∏ –Ω–∞ —É—Ä–æ–∫–µ! ‚ú®"
            )
        else:
            message = "üåü –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É—Ä–æ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç!\n\nüéâ –ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å!"
    else:
        message = "üéä –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å!\n\n‚ú® –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –æ—Ç–¥—ã—Ö–æ–º! üåü"
    
    await update.message.reply_text(message)

def is_bot_running():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    pid_file = "bot.pid"
    try:
        if os.path.exists(pid_file):
            file_age = time.time() - os.path.getmtime(pid_file)
            if file_age > 300:  
                os.remove(pid_file)
                logger.info("–£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID —Ñ–∞–π–ª")
                return False
            
            try:
                with open(pid_file, 'r') as f:
                    old_pid = int(f.read().strip())
                    os.remove(pid_file)
                    logger.info("–£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PID —Ñ–∞–π–ª")
                    return False
            except (ValueError, IOError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PID —Ñ–∞–π–ª–∞: {e}")
                os.remove(pid_file)
                return False
        
        with open(pid_file, 'w') as f:
            f.write(str(os.getpid()))
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {e}")
        return False

def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ PID —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    try:
        pid_file = "bot.pid"
        if os.path.exists(pid_file):
            os.remove(pid_file)
            logger.info("PID —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ PID —Ñ–∞–π–ª–∞: {e}")

async def send_scheduled_message(application: Application) -> None:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_tz)
        weekday = current_time.strftime('%A')
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {current_time.strftime('%H:%M')} {weekday}")
        
        
        notification_times = {
            (8, 20): (0, "8:30"),    # –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫
            (9, 15): (1, "9:25"),    # –í—Ç–æ—Ä–æ–π —É—Ä–æ–∫
            (10, 20): (2, "10:30"),  # –¢—Ä–µ—Ç–∏–π —É—Ä–æ–∫
            (11, 15): (3, "11:25"),  # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —É—Ä–æ–∫
            (12, 10): (4, "12:20"),  # –ü—è—Ç—ã–π —É—Ä–æ–∫
            (13, 5): (5, "13:15"),   # –®–µ—Å—Ç–æ–π —É—Ä–æ–∫
            (14, 10): (6, "14:20")   # –°–µ–¥—å–º–æ–π —É—Ä–æ–∫
        }
        
        if current_time.hour == 7 and current_time.minute == 30:
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
            for chat_id in chat_id_store.get_chat_ids():
                try:
                    context = ContextTypes.DEFAULT_TYPE(application=application)
                    context._chat_id = chat_id
                    await send_morning_message(context)
                    logger.info(f"–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è chat_id {chat_id}: {e}")
        
        current_time_tuple = (current_time.hour, current_time.minute)
        if current_time_tuple in notification_times and weekday in schedule_dict:
            lesson_index, start_time = notification_times[current_time_tuple]
            if lesson_index < len(schedule_dict[weekday]):
                time, lesson = schedule_dict[weekday][lesson_index]
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —É—Ä–æ–∫–µ {lesson} ({weekday}, {time})")
                
                for chat_id in chat_id_store.get_chat_ids():
                    try:
                        message = (
                            f"‚è∞ –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è {lesson_index + 1}-–π —É—Ä–æ–∫!\n\n"
                            f"üìÖ {weekday}\n"
                            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {lesson}\n"
                            f"‚è± –ù–∞—á–∞–ª–æ –≤ {time}\n"
                            f"üí´ –£–¥–∞—á–∏ –Ω–∞ —É—Ä–æ–∫–µ! ‚ú®"
                        )
                        await application.bot.send_message(
                            chat_id=chat_id,
                            text=message
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Ä–æ–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Ä–æ–∫–µ –¥–ª—è chat_id {chat_id}: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_scheduled_message: {e}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º"""
    subject_count = {}
    total_lessons = 0
    
    for day, lessons in schedule_dict.items():
        for _, subject in lessons:
            subject_count[subject] = subject_count.get(subject, 0) + 1
            total_lessons += 1
    
    sorted_subjects = sorted(subject_count.items(), key=lambda x: x[1], reverse=True)
    
    message = "‚ú® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º ‚ú®\n\n"
    for subject, count in sorted_subjects:
        percentage = (count / total_lessons) * 100
        message += f"üìö {subject}:\n   {count} —É—Ä–æ–∫–æ–≤ ({percentage:.1f}%) {'üåü' * (count // 2)}\n\n"
    
    message += f"üéØ –í—Å–µ–≥–æ {total_lessons} —É—Ä–æ–∫–æ–≤ –≤ –Ω–µ–¥–µ–ª—é! üéâ"
    await update.message.reply_text(message)

async def find_subject(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É"""
    if not context.args:
        await update.message.reply_text(
            "‚ú® –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫:\n\n"
            "üîç –ù–∞–ø–∏—à–∏: /find [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞]\n"
            "üìù –ù–∞–ø—Ä–∏–º–µ—Ä: /find –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n\n"
            "üí´ –ò —è –Ω–∞–π–¥—É –≤—Å–µ —É—Ä–æ–∫–∏ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É!"
        )
        return
    
    search_term = ' '.join(context.args).lower()
    found_lessons = []
    
    for day, lessons in schedule_dict.items():
        for time, subject in lessons:
            if search_term in subject.lower():
                found_lessons.append((day, time, subject))
    
    if found_lessons:
        message = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{search_term}':\n\n"
        for day, time, subject in found_lessons:
            message += f"üìÖ {day}\n‚è∞ {time} - üìö {subject}\n\n"
        message += "‚ú® –£–¥–∞—á–∏ –≤ —É—á–µ–±–µ! üåü"
    else:
        message = f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\nüí° –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å!"
    
    await update.message.reply_text(message)

async def ping_server() -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
    try:
        logger.info("üîÑ –ü–∏–Ω–≥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏–Ω–≥–∞: {e}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        load_answers()
        load_chats()
        is_bot_running()
        
        application = (
            Application.builder()
            .token(TELEGRAM_BOT_TOKEN)
            .connect_timeout(30)
            .read_timeout(30)
            .write_timeout(30)
            .build()
        )

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("test_morning", test_morning))
        application.add_handler(CommandHandler("test_lesson", test_lesson))
        application.add_handler(CommandHandler("schedule", show_schedule))
        application.add_handler(CommandHandler("week", week_schedule))
        application.add_handler(CommandHandler("next", next_lesson))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("find", find_subject))
        application.add_handler(CommandHandler("add_answer", add_answer))
        application.add_handler(CommandHandler("get_answer", get_answer))
        application.add_handler(CommandHandler("list_answer", list_answers))
        application.add_handler(CommandHandler("del_answer", del_answer))
        application.add_handler(CommandHandler("done", handle_done))

        application.add_handler(MessageHandler(
            (filters.TEXT | filters.PHOTO) & ~filters.COMMAND,
            handle_answer_input,
            block=False
        ))

        scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
        
        scheduler.add_job(
            send_scheduled_message,
            'cron',
            minute='*',
            args=[application],
            max_instances=1,
            coalesce=True,
            misfire_grace_time=None
        )
        
        scheduler.add_job(
            ping_server,
            'interval',
            minutes=5,
            max_instances=1,
            coalesce=True,
            misfire_grace_time=None
        )
        
        scheduler.start()

        logger.info(f"‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M:%S')}")
        
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        cleanup()
        sys.exit(1)

if __name__ == '__main__':
    try:
        main()
    finally:
        cleanup() 